@page "/game"
@inject AppSettings AppSettings
<h3>Jouer à AgiLex</h3>
<GameLayout>
    <Controls>
        <div>
            <h4>Valeur Agile à trouver : @agileValue</h4>
            <q>
                @phraseBegin <MaskedWord Word="@maskedWordString" /> @phraseEnd
            </q>
        </div>
        <div>
            <h4>
                Plutôt que
            </h4>
        </div>
        <div>
            <q>
                @insteadOf
            </q>
        </div>
        @if (!stageCompleted)
        {
            <div id="game">
                <label for="textInput" class="form-label">Tapez vos lettres ici.</label>
            <input type="text" autocomplete="off" class="form-control" id="textInput" @bind="textInput" @oninput="HandleInput" />
        </div>
        }
        @if (!maskedWord!.Contains('_'))
        {
            <h4 class="resultat">
                Gagné !
            </h4>
        }
        @if (counter > 9)
        {
            <h4 class="resultat">
                Perdu !
            </h4>
        }
        @if (stageCompleted)
        {
            <button class="btn btn-primary" @onclick="LevelUp">Continuer</button>
        }
        else
        {
            <div>@(10 - counter) tentatives restantes.</div>
        }
    </Controls>
    <Visualization>
        <Hangman Counter="@counter" />
    </Visualization>
</GameLayout>

@code {
    private static int stage = 0;
    private int userStage => stage + 1;
    private static int counter = 0;
    private static string? secretWord;
    private static string? phraseBegin;
    private static string? phraseEnd;
    private static char[]? maskedWord;
    private string maskedWordString => new string(maskedWord);
    private string insteadOf => AppSettings.AgileValues![stage].InsteadOf!;
    private string textInput = string.Empty;
    private bool stageCompleted => counter > 9 || !maskedWord!.Contains('_');
    private string agileValue => AppSettings.AgileValues![stage].Value!;

    private void ResetGame()
    {
        counter = 0;
        textInput = string.Empty;
        var config = AppSettings.AgileValues![stage];
        secretWord = config.WordToGuess!;
        maskedWord = new char[secretWord.Length];
        Array.Fill(maskedWord, '_');
        phraseBegin = config.Phrase!.Substring(0, config.Phrase.IndexOf(secretWord));
        phraseEnd = config.Phrase!.Substring(config.Phrase.IndexOf(secretWord) + secretWord.Length);
    }

    protected override void OnInitialized()
    {
        ResetGame();
        base.OnInitialized();
    }

    private void LevelUp()
    {
        stage++;
        if (stage >= AppSettings.AgileValues!.Length)
            stage = 0;
        ResetGame();
    }

    private void HandleInput(ChangeEventArgs e)
    {
        var s = (string?)e.Value;
        if (string.IsNullOrEmpty(s))
            return;
        var c = s.ToLower()[^1];
        if (c == 'é')
            c = 'e';
        var l = secretWord!.Length;
        var found = false;
        var secret = secretWord.Replace('é', 'e');
        for (var i = 0; i < l; i++)
        {
            if (maskedWord![i] == '_' && c == secret[i])
            {
                found = true;
                maskedWord[i] = secretWord[i];
            }
        }
        if (!found)
            counter++;
    }


}
