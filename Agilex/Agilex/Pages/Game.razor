@page "/game"
@inject AppSettings AppSettings
<h3>Jouer à AgiLex</h3> 
<div>
    <h4>Valeur Agile #@userStage</h4>
    <q>
        @phraseBegin @maskedWordString @phraseEnd
    </q>
</div>
<div>
    <h4>
        Plutôt que
    </h4>
</div>
<div>
    <q>
        @insteadOf
    </q>
</div>
<div id="game">
    <label for="textInput" class="form-label">Tapez vos lettres ici.</label>
    <input type="text" class="form-control" id="textInput" @bind="textInput" @oninput="HandleInput" />
</div>
@if (!maskedWord!.Contains('?'))
{
    <h4 class="resultat">
        Gagné !
    </h4>
}
@if (counter > 9)
{
    <h4 class="resultat">
        Perdu !
    </h4>
}
@if (counter > 9 || !maskedWord!.Contains('?'))
{
    <button class="btn btn-primary" @onclick="() => {ResetGame(); LevelUp();}">Continuer</button>
} else
{
    <div>@(10-counter) tentatives restantes.</div>
}
<div>
    <Hangman Counter="@counter" />
</div>

@code {
    private static int stage = 0;
    private int userStage => stage + 1;
    private static int counter = 0;
    private static string? secretWord;
    private static string? phraseBegin;
    private static string? phraseEnd;
    private static char[]? maskedWord;
    private string maskedWordString => new string(maskedWord);
    private string insteadOf => AppSettings.AgileValues![stage].InsteadOf!;
    private string textInput = string.Empty;

    private void ResetGame()
    {
        counter = 0;
        textInput = string.Empty;
        var config = AppSettings.AgileValues![stage];
        secretWord = config.WordToGuess!;
        maskedWord = new char[secretWord.Length];
        Array.Fill(maskedWord, '?');
        phraseBegin = config.Phrase!.Substring(0, config.Phrase.IndexOf(secretWord));
        phraseEnd = config.Phrase!.Substring(config.Phrase.IndexOf(secretWord) + secretWord.Length);
    }

    protected override void OnInitialized()
    {
        ResetGame();
        base.OnInitialized();
    }

    private void LevelUp()
    {
        stage++;
        if (stage >= AppSettings.AgileValues!.Length)
            stage = 0;
    }

    private void HandleInput(ChangeEventArgs e)
    {
        var s = (string?)e.Value;
        if (string.IsNullOrEmpty(s))
            return;
        var c = s[^1];
        if (c == 'é')
            c = 'e';
        var l = secretWord!.Length;
        var found = false;
        var secret = secretWord.Replace('é', 'e');
        for (var i = 0; i < l; i++)
        {
            if (maskedWord![i] == '?' && c == secret[i])
            {
                found = true;
                maskedWord[i] = secretWord[i];
            }
        }
        if (!found)
            counter++;
    }


}
