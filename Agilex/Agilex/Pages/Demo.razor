@page "/demo"
<h3>Demo du jeu AgiLex</h3> 
<div class="container">
    <div class="row">
        <div class="col">
            <div>
                <h4>Dans cette demo vous essayez de deviner le mot DEMO</h4>
                <q>
                    @phraseBegin @maskedWordString @phraseEnd
                </q>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-8">
            <div id="game">
                <label for="textInput" class="form-label">Tapez vos lettres ici.</label>
                <input type="text" class="form-control" id="textInput" @bind="textInput" @oninput="HandleInput" />
            </div>
            @if (!maskedWord!.Contains('?'))
            {
                <h4 class="resultat">
                    Gagné !
                </h4>
            }
            @if (counter > 9)
            {
                <h4 class="resultat">
                    Perdu !
                </h4>
            }
            @if (counter > 9 || !maskedWord!.Contains('?'))
            {
                <button class="btn btn-primary" @onclick="ResetGame">Refaire la DEMO</button>
            }
            else
            {
                <div>@(10 - counter) tentatives restantes.</div>
            }
        </div>
        <div class="col-4">
            <div>
                <Hangman Counter="@counter" />
            </div>
        </div>
    </div>
</div>

@code {
    private static int counter = 0;
    private static string? secretWord;
    private static string? phraseBegin;
    private static string? phraseEnd;
    private static char[]? maskedWord;
    private string maskedWordString => new string(maskedWord);
    private string textInput = string.Empty;

    private void ResetGame()
    {
        counter = 0;
        textInput = string.Empty;
        secretWord = "demo";
        maskedWord = new char[secretWord.Length];
        Array.Fill(maskedWord, '?');
        phraseBegin = "ceci est une ";
        phraseEnd = " de Agilex";
    }

    protected override void OnInitialized()
    {
        ResetGame();
        base.OnInitialized();
    }

    private void HandleInput(ChangeEventArgs e)
    {
        var s = (string?)e.Value;
        if (string.IsNullOrEmpty(s))
            return;
        var c = s[^1];
        if (c == 'é')
            c = 'e';
        var l = secretWord!.Length;
        var found = false;
        var secret = secretWord.Replace('é', 'e');
        for (var i = 0; i < l; i++)
        {
            if (maskedWord![i] == '?' && c == secret[i])
            {
                found = true;
                maskedWord[i] = secretWord[i];
            }
        }
        if (!found)
            counter++;
    }


}
